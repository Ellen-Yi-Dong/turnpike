    # The regex is used so that the capture group then can be appended to the $upstream variable after the
    # authentication is successful.
    #
    # For example, for a back end defined as so:
    #
    # - Origin: http://my-service.service.local
    # - Route: /api/my-service
    #
    # If a request gets sent to "/api/my-service/resource/subresource", the "/resource/subresource" part
    # gets captured by the regex group, and applied to the "proxy_pass" directive after the "$upstream"
    # variable, which results in the following URL: "http://my-service.service.local/resource/subresource".
    location ~ {{ route }}(.*)$ {
        resolver {{ resolver }} valid=60s;
        set $upstream  {{ origin }};
        set $matched_backend {{ name }};
        auth_request     /auth/;
        auth_request_set $login_url $upstream_http_login_url;
        # Set whether the original request comes from the internal VPN or not, so that we can redirect the
        # requester properly in the "api_gateway" configuration's "error" location.
        auth_request_set $original_request_comes_from_vpn $upstream_http_x_rh_original_request_comes_from_vpn;

        {% for header in headers %}
        auth_request_set $turnpike_{{ header.lower().replace("-", "_") }} $upstream_http_{{ header.lower().replace("-", "_") }};
        {% endfor %}
        proxy_pass              $upstream$1$is_args$args;
        proxy_set_header        X-Original-URI $request_uri;
        proxy_set_header        X-Real-IP $remote_addr;
        proxy_set_header        X-Forwarded-Host $host;
        proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header        X-Forwarded-Port 443;
        proxy_set_header        X-Forwarded-Proto https;
        {% for header in headers %}
        proxy_set_header        {{ header }} $turnpike_{{ header.lower().replace("-", "_") }};
        {% endfor %}
    }
